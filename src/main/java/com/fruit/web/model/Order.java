package com.fruit.web.model;

import com.fruit.web.model.base.BaseOrder;
import com.jfinal.plugin.activerecord.Db;

import java.math.BigDecimal;
import java.util.List;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Order extends BaseOrder<Order> {
	public static final Order dao = new Order().dao();

	// 获取我的订单数据
	public List<Order> getOrderListByStatus(String uid, String status){
		StringBuilder sql = new StringBuilder();
		sql.append("select od.id,od.order_id , od.create_time , p.`name`,p.img as img_url, ");
		sql.append("if(p.country='中国','中国','进口') as country ,od.num, ");
		sql.append("od.buy_remark,if(p.country='中国',false,false) `check`,o.pay_status ispay, ");
		sql.append("od.sell_price,od.product_standard_name ,o.`order_status`,od.product_id,od.product_standard_id ");
		sql.append("from b_product p,b_product_standard ps,b_order_detail od,b_order o ");
		sql.append("where p.id=ps.product_id and p.id=od.product_id ");
		sql.append("and od.product_standard_id=ps.id  and o.order_id=od.order_id ");
		sql.append("and o.u_id=? ");
		sql.append("and o.`order_status` in (");
		sql.append(status);
		sql.append(") ");
		sql.append("order by od.create_time desc");
		return find(sql.toString(),uid);
	}

	/**
	 * 获取待支付金额
	 * @param orderId
	 * @return
	 */
	public BigDecimal getOrderPayNeedMoney (String orderId) {
		StringBuilder sql = new StringBuilder();
		sql.append("SELECT pay_need_money FROM b_order WHERE order_id = ?");
		 Order order = dao.findFirst(sql.toString(), orderId);
		BigDecimal payNeedMoney = order.getPayNeedMoney();
		return payNeedMoney;
	}

	/**
	 * 获取订单信息
	 * @param orderId
	 * @return
	 */
	public Order getOrder (String orderId) {
		StringBuilder sql = new StringBuilder();
		sql.append("SELECT\n" +
				"b.id,\n" +
				"b.order_id,\n" +
				"b.u_id,\n" +
				"b.order_status,\n" +
				"b.pay_status,\n" +
				"b.pay_need_money,\n" +
				"b.pay_total_money,\n" +
				"b.pay_callback,\n" +
				"b.pay_success,\n" +
				"b.buy_user_name,\n" +
				"b.buy_phone,\n" +
				"b.buy_address,\n" +
				"b.delivery_type,\n" +
				"b.pay_time,\n" +
				"b.refund_status,\n" +
				"b.delivery_time,\n" +
				"b.refund_time,\n" +
				"b.create_time,\n" +
				"b.update_time\n" +
				"FROM\n" +
				"b_order AS b\n" +
				"WHERE\n" +
				"b.order_id = ?\n" );
		Order order = dao.findFirst(sql.toString(), orderId);
		return order;
	}

	// 根据订单号获取我的订单数据
	public List<Order> getOrderListDetail(String uid, String status,String orderId){
		StringBuilder sql = new StringBuilder();
		sql.append("select o.id,o.order_id , o.create_time , p.`name`,pi.img_url, ");
		sql.append("CASE p.country\n" +
				"\t\tWHEN '中国' THEN\n" +
				"\t\t\t'国产'\n" +
				"\t\tWHEN '香港' THEN\n" +
				"\t\t\t'国产'\n" +
				"\t\tELSE\n" +
				"\t\t\t'进口'\n" +
				"\t\tEND country,as country ,o.num, ");
		sql.append("o.buy_remark,if(p.country='中国',false,false) `check`,o.pay_status ispay,o.sell_price,o.product_standard_name ");
		sql.append("from b_product p,b_product_standard ps,b_order o,b_product_img pi ");
		sql.append("where p.id=ps.product_id and p.id=o.product_id and pi.product_id=o.product_id ");
		//sql.append("and o.product_standard_id=ps.id ");
		sql.append("and o.buy_uid=? ");
		sql.append("and o.`status` in (");
		sql.append("and o.order_id=? ");
		sql.append(status);
		sql.append(") ");
		sql.append("order by o.create_time ");
		return find(sql.toString(),uid,orderId);
	}

	// 获取我的订单对应的商品种类个数
	public List<Order> getOrderCountByStatus(String uid, String status){
		StringBuilder sql = new StringBuilder();
		sql.append("select count(order_id),order_id ");
		sql.append("from b_product p,b_product_standard ps,b_order o,b_product_img pi ");
		sql.append("where p.id=ps.product_id and p.id=o.product_id and pi.product_id=o.product_id ");
		//sql.append("and o.product_standard_id=ps.id ");
		sql.append("and o.buy_uid=? ");
		sql.append("and o.`status` in (");
		sql.append(status);
		sql.append(") ");
		sql.append("order by o.create_time ");
		List<Order> list=find(sql.toString(),uid);
		return list;
	}

	public List<Order> getOrderCountList(String uid){
		StringBuilder sql=new StringBuilder();
		sql.append("SELECT `order_status`,count(`order_status`) count ");
		sql.append("from b_order o ");
		sql.append("where o.u_id=? ");
		sql.append("GROUP BY `order_status` ");
		List<Order> orderList=find(sql.toString(),uid);
		return orderList;
	}

    /**
     * 删除订单
     *
     * @param orderId
     */
    public void removeOrder(int orderId) {
        Db.update("delete from b_order where order_id = ? ", orderId);
    }

    /**
     * 添加订单
     *
     * @param order
     */
    public void addOrder(Order order) {
        order.save();
    }
}
